Using Beautiful Soup on the location info page:

First, use requests to get a link: e.g. r = requests.get("http://purple.com")
Then the actual html would be r.content
Then use Beautiful Soup on that.


python -i example_urls.py 

>>> link = availability[1]
>>> raw_html = requests.get(link)
>>> raw_html.content
(big chunk of HTML)

>>> from bs4 import BeautifulSoup
>>> soup = BeautifulSoup(raw_html.content)
WARNS me about html parser!

So instead:
 >>> soup = BeautifulSoup(raw_html.content, "html.parser")

Now for each one, I can look at repr, or the text, etc.

Things without whitespace: soup.stripped_strings

To get the classes of an element, do whatever['class'], get a list of classes.
or whatever.attrs will show {'class' : blah}


USE SOME REGULAR EXPRESSIONS!

Goodreads API documentation just says GET requests.
https://www.goodreads.com/review/list/2416346?shelf=to-read

v: 2
id: Goodreads id of the user
shelf: read, currently-reading, to-read, etc. (optional)
sort: title, author, cover, rating, year_pub, date_pub, date_pub_edition, date_started, date_read, date_updated, date_added, recommender, avg_rating, num_ratings, review, read_count, votes, random, comments, notes, isbn, isbn13, asin, num_pages, format, position, shelves, owned, date_purchased, purchase_location, condition (optional)
search[query]: query text to match against member's books (optional)
order: a, d (optional) [default: a for ascending]
page: 1-N (optional)
per_page: 1-200 (optional)
key: Developer key (required).


Idea: SORT OUTPUT BY CALL NUMBER! Yes!

SFPL calls

Search by author only: https://sfpl.bibliocommons.com/search?q="Butler%2C+Octavia+E."&search_category=author&t=author
Search by title only: https://sfpl.bibliocommons.com/search?utf8=%E2%9C%93&q=Fledgling&t=title&search_category=title

Custom query https://sfpl.bibliocommons.com/search?custom_query=author%3AButler+title%3AFledgling+format%3ABook&suppress=true&custom_edit=true



Writing your own search queries: http://help.bibliocommons.com/010searching/015writing/


OK so for example https://sfpl.bibliocommons.com/search?custom_query=title%3A(Fledgling)+contributor%3A(Octavia+Butler)+formatcode%3A(BOOK_CD+OR+BK+OR+AB+OR+EBOOK+)&suppress=true&custom_edit=true

Or jsut https://sfpl.bibliocommons.com/search?custom_query=title%3A(Fledgling)+contributor%3A(Octavia+Butler)+formatcode%3A(BOOK_CD+OR+BK+OR+AB+OR+EBOOK+)

Or even just https://sfpl.bibliocommons.com/search?custom_query=title%3A(Fledgling)+contributor%3A(Octavia+Butler)

Henry says: URL Parse
Also save extracted data to files so not always querying it